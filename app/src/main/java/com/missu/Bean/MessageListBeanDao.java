package com.missu.Bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_LIST_BEAN".
*/
public class MessageListBeanDao extends AbstractDao<MessageListBean, Long> {

    public static final String TABLENAME = "MESSAGE_LIST_BEAN";

    /**
     * Properties of entity MessageListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property Other_Account = new Property(1, String.class, "Other_Account", false, "OTHER__ACCOUNT");
        public final static Property Other_nick = new Property(2, String.class, "Other_nick", false, "OTHER_NICK");
        public final static Property Other_avater = new Property(3, String.class, "Other_avater", false, "OTHER_AVATER");
        public final static Property Type = new Property(4, String.class, "type", false, "TYPE");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property Translate = new Property(6, String.class, "translate", false, "TRANSLATE");
        public final static Property Content = new Property(7, String.class, "content", false, "CONTENT");
    }


    public MessageListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MessageListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"OTHER__ACCOUNT\" TEXT," + // 1: Other_Account
                "\"OTHER_NICK\" TEXT," + // 2: Other_nick
                "\"OTHER_AVATER\" TEXT," + // 3: Other_avater
                "\"TYPE\" TEXT," + // 4: type
                "\"TIME\" TEXT," + // 5: time
                "\"TRANSLATE\" TEXT," + // 6: translate
                "\"CONTENT\" TEXT);"); // 7: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageListBean entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String Other_Account = entity.getOther_Account();
        if (Other_Account != null) {
            stmt.bindString(2, Other_Account);
        }
 
        String Other_nick = entity.getOther_nick();
        if (Other_nick != null) {
            stmt.bindString(3, Other_nick);
        }
 
        String Other_avater = entity.getOther_avater();
        if (Other_avater != null) {
            stmt.bindString(4, Other_avater);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String translate = entity.getTranslate();
        if (translate != null) {
            stmt.bindString(7, translate);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageListBean entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String Other_Account = entity.getOther_Account();
        if (Other_Account != null) {
            stmt.bindString(2, Other_Account);
        }
 
        String Other_nick = entity.getOther_nick();
        if (Other_nick != null) {
            stmt.bindString(3, Other_nick);
        }
 
        String Other_avater = entity.getOther_avater();
        if (Other_avater != null) {
            stmt.bindString(4, Other_avater);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(5, type);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
 
        String translate = entity.getTranslate();
        if (translate != null) {
            stmt.bindString(7, translate);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(8, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageListBean readEntity(Cursor cursor, int offset) {
        MessageListBean entity = new MessageListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Other_Account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Other_nick
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Other_avater
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // translate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageListBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOther_Account(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOther_nick(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOther_avater(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTranslate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageListBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageListBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageListBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
